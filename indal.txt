log start time journey visulaize of the user in 3d

or graphical view





Log Dashboard

Log Analyser dashboard with features like import .log files 
with advance filtering

install demon on ubuntu/ec2 server and stream all the logs to 
the log analyser dashboard tool (find other better approach if any)

features add such as s3 bucket import .logs files or zip folder


create library to push/stream in logging dashboard



priority base logging :- https://leapcell.io/blog/zap-logging-go-potential?ref=dailydev


log search api integration 

{
  "logs": [
    {
      "project_id": "123",
      "service": "auth-service",
      "level": "ERROR",
      "message": "User login failed",
      "timestamp": "2025-02-01T12:34:56Z",
      "metadata": {
        "user_ip": "192.168.1.1",
        "trace_id": "abcd-efgh-ijkl"
      }
    }
  ],
  "pagination": {
    "current_page": 1,
    "total_pages": 10,
    "total_logs": 500
  }
}

logger.log({
  level: 'info',
  message: 'Hello distributed log files!'
});



encryption integration 
auth integration
an agent to pull data of cpu, netork, ram, processor, disk usage of a server


share logs within teams

or user journey visulaize( of the user in 3d) 
user journey should be with time user has visited 4 services (auth, payment, user, notification) it should show the journey logs as per it.



feature add:- user coming from web, mobile, as per user agent header



custom func invoke on level (webhook functionality)



make sensitive data masking engine with custom configrable as per user need also


list down each every feature documentation for this

search text highlights feature add


input and output builder tool for custom data param binding for unstructure logs 



POST http://localhost:8080/v1/logs
Content-Type: application/json
Authorization: Bearer <your-token>

[
  {
    "level": "error",
    "message": "User login failed",
    "service": "user-service",
    "timestamp": "2025-02-11T15:11:57+05:30",
    "metadata": { "test": "test" }
  },
  {
    "level": "info",
    "message": "User logged in",
    "service": "auth-service",
    "timestamp": "2025-02-11T16:00:00+05:30"
  }
]


📌 4️⃣ Log Forwarding (Send Logs to External Services)
Why? Some companies want to forward logs to their own SIEMs or monitoring tools.

🔹 Features to Add:
✅ Forward logs to Splunk, Datadog, Elasticsearch, Kafka, Prometheus
✅ Support Webhooks to send logs to any 



✅ Recommended Folder Structure for Tests in Go (Best Practices)
Your suggested structure (test/e2e, test/unit, test/integration) is good, but it can be improved based on industry best practices for better maintainability and scalability.
project-root/
│── internal/             # Business logic, services, repositories
│── cmd/                 # Application entry points
│── pkg/                 # Shared utilities
│── api/                 # API handlers (if following clean architecture)
│── test/                # All test-related files
│   │── e2e/             # End-to-End tests (Real services, DBs)
│   │   ├── user_flow_test.go
│   │   ├── payment_test.go
│   │── integration/     # API + DB + External Service tests
│   │   ├── user_repository_test.go
│   │   ├── auth_service_test.go
│   │── unit/            # Unit tests (Mock dependencies)
│   │   ├── auth_handler_test.go
│   │   ├── user_service_test.go
│   │── mocks/           # Mock files for testing
│   │   ├── mock_auth_service.go
│   │   ├── mock_user_repo.go
│   │── fixtures/        # Sample JSON, YAML test data
│   │   ├── user_signup.json
│   │   ├── payment_response.json
│── docker-compose.test.yml # Docker setup for testing
│── Makefile             # Commands to run tests easily
│── go.mod               # Dependencies
│── go.sum               # Dependency checksums


test-unit:
    go test ./test/unit/... -v

test-integration:
    go test ./test/integration/... -v

test-e2e:
    go test ./test/e2e/... -v

test-all:
    go test ./test/... -v



import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow, format } from "date-fns";
import {
  AlertTriangle,
  Info,
  FileText,
  Share2,
  Download,
  Table,
  List,
  Calendar,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState, useCallback, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { toast } from "sonner";
import { motion, AnimatePresence } from "framer-motion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TimelineView } from "./components/TimelineView";
import { TableView } from "./components/TableView";
import { ListView } from "./components/ListView";
import { CompactView } from "./components/CompactView";
import LogSectionHeader from "./components/LogSectionHeader";
import { BookmarkButton } from "@/components/bookmark-button";

interface Log {
  id: string;
  message: string;
  level: string;
  service: string;
  timestamp: string;
  metadata: Record<string, string>;
  action?: string;
  file?: string;
  func_name?: string;
}

interface LogSectionProps {
  logs: Log[];
}

type ViewMode = "list" | "table" | "timeline" | "compact";
type Theme = "light" | "dark" | "system";

export default function LogSection({ logs }: LogSectionProps) {
  const [selectedLog, setSelectedLog] = useState<Log | null>(null);
  const [showLogDetails, setShowLogDetails] = useState(false);
  const [viewMode, setViewMode] = useState<ViewMode>("list");
  const [timeFormat, setTimeFormat] = useState<"relative" | "absolute">(
    "relative"
  );
  const [bookmarkedLogs, setBookmarkedLogs] = useState<Set<string>>(new Set());
  const [showBookmarkedOnly, setShowBookmarkedOnly] = useState(false);
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc");
  const [quickFilter, setQuickFilter] = useState("");
  const [theme, setTheme] = useState<Theme>("system");
  const [fontSize, setFontSize] = useState(14);
  const [compactMode, setCompactMode] = useState(false);
  const [showLineNumbers, setShowLineNumbers] = useState(true);
  const [visibleColumns, setVisibleColumns] = useState<Set<string>>(
    new Set(["level", "message", "timestamp", "service"])
  );

  // Load user preferences from localStorage
  useEffect(() => {
    const loadPreferences = () => {
      const savedPrefs = localStorage.getItem("logifyPreferences");
      if (savedPrefs) {
        const prefs = JSON.parse(savedPrefs);
        setTheme(prefs.theme || "system");
        setFontSize(prefs.fontSize || 14);
        setCompactMode(prefs.compactMode || false);
        setShowLineNumbers(prefs.showLineNumbers || true);
        setVisibleColumns(
          new Set(
            prefs.visibleColumns || ["level", "message", "timestamp", "service"]
          )
        );
      }
    };
    loadPreferences();
  }, []);

  // Save user preferences
  const savePreferences = useCallback(() => {
    const prefs = {
      theme,
      fontSize,
      compactMode,
      showLineNumbers,
      visibleColumns: Array.from(visibleColumns),
    };
    localStorage.setItem("logifyPreferences", JSON.stringify(prefs));
    toast.success("Preferences saved successfully");
  }, [theme, fontSize, compactMode, showLineNumbers, visibleColumns]);

  // Calculate statistics
  useEffect(() => {
    const calculateStats = () => {
      const errorCount = logs.filter(
        (log) => log.level.toLowerCase() === "error"
      ).length;
      const warningCount = logs.filter(
        (log) => log.level.toLowerCase() === "warning"
      ).length;
      const infoCount = logs.filter(
        (log) => log.level.toLowerCase() === "info"
      ).length;

      // Calculate logs per minute
      const timestamps = logs.map((log) => new Date(log.timestamp).getTime());
      const timeRange = Math.max(...timestamps) - Math.min(...timestamps);
      const avgLogsPerMinute =
        timeRange > 0 ? logs.length / (timeRange / 60000) : 0;
    };
    calculateStats();
  }, [logs]);

  const filteredAndSortedLogs = logs
    .filter((log) => {
      if (showBookmarkedOnly && !bookmarkedLogs.has(log.id)) return false;
      if (quickFilter) {
        const searchTerm = quickFilter.toLowerCase();
        return (
          log.message.toLowerCase().includes(searchTerm) ||
          log.service.toLowerCase().includes(searchTerm) ||
          log.level.toLowerCase().includes(searchTerm) ||
          log.action?.toLowerCase().includes(searchTerm) ||
          log.file?.toLowerCase().includes(searchTerm) ||
          log.func_name?.toLowerCase().includes(searchTerm) ||
          Object.entries(log.metadata).some(
            ([key, value]) => key.toLowerCase().includes(searchTerm)
            // || value.toLowerCase().includes(searchTerm)
          )
        );
      }
      return true;
    })
    .sort((a, b) => {
      const comparison =
        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      return sortOrder === "desc" ? comparison : -comparison;
    });

  const formatTimestamp = (timestamp: string) => {
    // if (timeFormat === "relative") {
    //   return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
    // }
    return new Date(timestamp).toLocaleString();
  };

  const getLevelDetails = (level: string) => {
    switch (level.toUpperCase()) {
      case "ERROR":
        return {
          color: "bg-red-500/10 text-red-500 border-red-200",
          icon: <AlertTriangle className="h-4 w-4" />,
          borderColor: "#ef4444",
        };
      case "WARNING":
        return {
          color: "bg-yellow-500/10 text-yellow-500 border-yellow-200",
          icon: <AlertTriangle className="h-4 w-4" />,
          borderColor: "#f59e0b",
        };
      case "INFO":
        return {
          color: "bg-blue-500/10 text-blue-500 border-blue-200",
          icon: <Info className="h-4 w-4" />,
          borderColor: "#3b82f6",
        };
      default:
        return {
          color: "bg-gray-500/10 text-gray-500 border-gray-200",
          icon: <Info className="h-4 w-4" />,
          borderColor: "#6b7280",
        };
    }
  };

  if (logs.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col items-center justify-center h-[400px] text-muted-foreground"
      >
        <FileText className="h-12 w-12 mb-4 text-muted-foreground/50" />
        <p className="text-lg font-medium">No logs found</p>
        <p className="text-sm">Try adjusting your filters or search terms</p>
      </motion.div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* View Mode Selector */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-4">
          <Button
            variant={viewMode === "list" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("list")}
          >
            <List className="h-4 w-4 mr-2" />
            List View
          </Button>
          <Button
            variant={viewMode === "table" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("table")}
          >
            <Table className="h-4 w-4 mr-2" />
            Table View
          </Button>
          <Button
            variant={viewMode === "timeline" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("timeline")}
          >
            <Calendar className="h-4 w-4 mr-2" />
            Timeline
          </Button>
          <Button
            variant={viewMode === "compact" ? "default" : "ghost"}
            size="sm"
            onClick={() => setViewMode("compact")}
          >
            <FileText className="h-4 w-4 mr-2" />
            Compact
          </Button>
        </div>
      </div>

      {/* Log Content */}
      <ScrollArea className="flex-1">
        <div className="p-4">
          {viewMode === "list" && (
            <ListView
              logs={filteredAndSortedLogs}
              bookmarkedLogs={bookmarkedLogs}
              setSelectedLog={setSelectedLog}
              formatTimestamp={formatTimestamp}
            />
          )}
          {viewMode === "table" && (
            <TableView
              logs={filteredAndSortedLogs}
              bookmarkedLogs={bookmarkedLogs}
              setSelectedLog={setSelectedLog}
              formatTimestamp={formatTimestamp}
            />
          )}
          {viewMode === "timeline" && (
            <TimelineView
              logs={filteredAndSortedLogs}
              bookmarkedLogs={bookmarkedLogs}
              setSelectedLog={setSelectedLog}
              formatTimestamp={formatTimestamp}
            />
          )}
          {viewMode === "compact" && (
            <CompactView
              logs={filteredAndSortedLogs}
              bookmarkedLogs={bookmarkedLogs}
              setSelectedLog={setSelectedLog}
              formatTimestamp={formatTimestamp}
            />
          )}
        </div>
      </ScrollArea>

      {/* Log Details Dialog */}
      <Dialog open={!!selectedLog} onOpenChange={() => setSelectedLog(null)}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Badge
                  variant="secondary"
                  className={`flex items-center gap-1.5 ${
                    selectedLog && getLevelDetails(selectedLog.level).color
                  }`}
                >
                  {selectedLog && getLevelDetails(selectedLog.level).icon}
                  {selectedLog?.level}
                </Badge>
                <Badge variant="outline" className="font-mono">
                  {selectedLog?.service}
                </Badge>
                <span className="text-sm text-muted-foreground">
                  {selectedLog && formatTimestamp(selectedLog.timestamp)}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
              </div>
            </DialogTitle>
          </DialogHeader>
          <ScrollArea className="flex-1 w-full">
            <div className="space-y-6 p-1">
              <div className="space-y-2">
                <h4 className="text-sm font-semibold">Message</h4>
                <div className="bg-muted p-3 rounded-md">
                  <pre className="text-sm font-mono whitespace-pre-wrap break-all">
                    {selectedLog?.message}
                  </pre>
                </div>
              </div>

              <div className="space-y-2">
                <h4 className="text-sm font-semibold">Metadata</h4>
                <div className="bg-muted p-3 rounded-md">
                  <pre className="text-sm font-mono whitespace-pre-wrap break-all">
                    {selectedLog &&
                      JSON.stringify(selectedLog.metadata, null, 2)}
                  </pre>
                </div>
              </div>

              {(selectedLog?.action ||
                selectedLog?.file ||
                selectedLog?.func_name) && (
                <div className="space-y-2">
                  <h4 className="text-sm font-semibold">
                    Additional Information
                  </h4>
                  <div className="bg-muted p-3 rounded-md">
                    <div className="grid gap-2 text-sm font-mono">
                      {selectedLog?.action && (
                        <div className="grid grid-cols-[100px,1fr] gap-2">
                          <span className="font-semibold">Action:</span>
                          <span className="break-all">
                            {selectedLog.action}
                          </span>
                        </div>
                      )}
                      {selectedLog?.file && (
                        <div className="grid grid-cols-[100px,1fr] gap-2">
                          <span className="font-semibold">File:</span>
                          <span className="break-all">{selectedLog.file}</span>
                        </div>
                      )}
                      {selectedLog?.func_name && (
                        <div className="grid grid-cols-[100px,1fr] gap-2">
                          <span className="font-semibold">Function:</span>
                          <span className="break-all">
                            {selectedLog.func_name}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
        </DialogContent>
      </Dialog>
    </div>
  );
}


import { AnimatePresence } from "framer-motion";
import { Log } from "../types";
import { LogCard } from "./LogCard";
import { toast } from "sonner";

interface ListViewProps {
  logs: Log[];
  bookmarkedLogs: Set<string>;
  setSelectedLog: (log: Log) => void;
  formatTimestamp: (timestamp: string) => string;
  toggleBookmark: (id: string) => void;
  setQuickFilter: (query: string) => void;
}

export function ListView({
  logs,
  bookmarkedLogs,
  setSelectedLog,
  formatTimestamp,
  toggleBookmark,
  setQuickFilter,
}: ListViewProps) {
  const handleShare = (log: Log) => {
    // Implement share logic
    toast.success("Share feature coming soon!");
  };

  const handleDownload = (log: Log) => {
    // Implement download logic
    toast.success("Download feature coming soon!");
  };

  const handleCopy = (content: string, id: string) => {
    navigator.clipboard.writeText(content);
    toast.success("Copied to clipboard!");
  };

  return (
    <AnimatePresence mode="popLayout">
      {logs.map((log, index) => (
        <LogCard
          key={log.id}
          log={log}
          index={index}
          isBookmarked={bookmarkedLogs.has(log.id)}
          formatTimestamp={formatTimestamp}
          onBookmark={toggleBookmark}
          onShare={handleShare}
          onDownload={handleDownload}
          onCopy={handleCopy}
          onSetQuickFilter={setQuickFilter}
          onSelect={setSelectedLog}
        />
      ))}
    </AnimatePresence>
  );
}



// Navigation items
const navigationItems = [
  {
    title: "Dashboard",
    icon: LayoutDashboard,
    href: "/dashboard",
  },
  {
    title: "Logs",
    icon: Logs,
    href: "/logs",
  },
  {
    title: "Projects",
    icon: GalleryVerticalEnd,
    href: "/projects",
  },
  {
    title: "Alerts",
    icon: Bell,
    href: "/alerts",
  },
  {
    title: "Billing",
    icon: CreditCard,
    href: "/billing",
  },
  {
    title: "Documentation",
    icon: BookOpen,
    href: "/docs",
  },
  {
    title: "Analytics",
    icon: BarChart,
    href: "/analytics",
  },
  {
    title: "Import",
    icon: Upload,
    href: "/import",
  },
  {
    title: "Export",
    icon: Download,
    href: "/export",
  },
  {
    title: "Bookmarks",
    icon: Bookmark,
    href: "/bookmarks",
  },
  {
    title: "Notifications",
    icon: Bell,
    href: "/notifications",
  },
  {
    title: "Webhooks",
    icon: Webhook,
    href: "/webhooks",
  },
  {
    title: "Teams & Members",
    icon: Users,
    href: "/teams",
  },
  {
    title: "Audit Logs",
    icon: ScrollText,
    href: "/audit",
  },
  {
    title: "Settings",
    icon: Settings2,
    href: "/settings",
  },
];